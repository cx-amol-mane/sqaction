name: 'Setup SonarQube'
description: 'Sets up and starts a SonarQube instance with specified version'
inputs:
  sonarqube-version:
    description: 'SonarQube version to install'
    required: true
outputs:
  status:
    description: 'Status of SonarQube setup'
    value: ${{ steps.status-check.outputs.status }}
runs:
  using: 'composite'
  steps:
    - name: Install Podman
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y podman

    - name: Start SonarQube ${{ inputs.sonarqube-version }}
      shell: bash
      run: |
        podman run -d --name sonar-${{ inputs.sonarqube-version }} \
          -p 9000:9000 \
          docker.io/sonarqube:${{ inputs.sonarqube-version }}-community

        # Wait for initial startup with more robust checks
        echo "Waiting for SonarQube to start..."
        for i in {1..15}; do
          echo "Attempt $i/15"
          
          # Check if container is running
          podman ps -a | grep -q sonar-${{ inputs.sonarqube-version }} && echo "Container is running" || echo "Container not found"
          
          # Check if port is listening
          if netstat -tlnp | grep -q ':9000'; then
            echo "Port 9000 is listening"
            
            # Try to connect to SonarQube
            if curl -sSf -u admin:admin http://localhost:9000/api/system/status | grep -q "UP"; then
              echo "SonarQube is up and running!"
              break
            else
              echo "SonarQube not ready yet"
            fi
          else
            echo "Port 9000 not listening yet"
          fi
          
          sleep 10
        done

        # Final check
        if ! curl -sSf -u admin:admin http://localhost:9000/api/system/status | grep -q "UP"; then
          echo "SonarQube failed to start properly"
          echo "Checking logs for errors..."
          podman logs sonar-${{ inputs.sonarqube-version }}
          exit 1
        fi

        echo "SonarQube is fully started and ready"

    - name: Status Check
      id: status-check
      shell: bash
      run: |
        echo "SonarQube status check:"
        STATUS=$(curl -sSf -u admin:admin http://localhost:9000/api/system/status)
        echo "::set-output name=status::$STATUS"
        echo $STATUS